import os
import sys
import requests
import urllib
import subprocess
import pefile
import MySQLdb
from datetime import datetime

def Update_BDD(argument, value, md5):
    argument = str(argument).replace(" ","").replace("'","")
    value = str(value).replace("\t","")
    db = MySQLdb.connect("localhost","root","toor","MalwareLab")
    cursor = db.cursor()
    #print(argument, value, md5)
    cursor.execute("""UPDATE MalwareLab.Malwares SET {} = %s WHERE md5 = %s""".format(argument), (value, md5))    
    db.commit()
    db.close()

def Check_already_in_BDD(md5):
    db = MySQLdb.connect("localhost","root","toor","MalwareLab")
    cursor = db.cursor()
    cursor.execute("""SELECT md5 FROM MalwareLab.Malwares WHERE md5 = %s""",[md5])
    rows = cursor.fetchall()
    db.close()
    return(rows)
 
def Insert_to_BDD(path, md5, size, type_m):
    if str(Check_already_in_BDD(md5)) == "()":
        db = MySQLdb.connect("localhost","root","toor","MalwareLab")
        cursor = db.cursor()
        cursor.execute("""INSERT INTO MalwareLab.Malwares (md5, path, type) VALUE (%s,%s,%s)""",(str(md5), str(path), str(type_m)))
        db.commit()
        db.close()
#    else:
        #print("Sample already in database")

def Get_PE_details(malware_path, md5):
    pe_section_array = []
    pe_dll_array = []
    pe = pefile.PE(malware_path)
    count = 0
    loop_count = 0
    dll_array = ""
    for entry in pe.DIRECTORY_ENTRY_IMPORT:
        pe_dll_array.append(entry.dll.decode('utf-8'))
        count += 1
    print("Imported DLL (" + str(count) + "): ")
    for x in range(0, count):
        sys.stdout.write(str(pe_dll_array[x]).replace(".dll",""))
        dll_array = str(dll_array) + str(pe_dll_array[x])
        if x != int(count) - 1:
            sys.stdout.write(", ")
            dll_array = str(dll_array) + "|"
    print("")
    Update_BDD("import_dll", str(dll_array), str(md5))

    section_array = ""
    for section in pe.sections:
        pe_section_array.append(section.Name.decode('utf-8'))
    sections_number = len(pe_section_array)
    print("\nPE sections found (" + str(sections_number) + "): ")
    for x in range(0, sections_number):
        sys.stdout.write(str(pe_section_array[x]))
        section_array = str(section_array) + str(pe_section_array[x])
        if int(x) != int(sections_number) - 1:
            sys.stdout.write(str(", "))
            section_array = str(section_array) + "|"
    print("")
    Update_BDD("sections", str(section_array), str(md5))

def Generic_PE_infos(malware_path):
    #Get_PE_details(malware_path)
    result_array = []
    out = subprocess.Popen(['du', '-sh', str(malware_path)],
    stdout = subprocess.PIPE,
    stderr = subprocess.PIPE)
    stdout, stderr = out.communicate()
    pe_size = str(stdout).replace(malware_path, "")
    result_array.append(pe_size)

    out = subprocess.Popen(['file', str(malware_path)],
    stdout = subprocess.PIPE,
    stderr = subprocess.PIPE)
    stdout, stderr = out.communicate()
    pe_type = str(stdout).replace(str(malware_path) + ": ","")
    result_array.append(str(pe_type))

#    print("Size: " + str(pe_size))
#    print("Type: " + str(pe_type))
    return(result_array)

def Yara_scan_malware(malware_path, rules_dir):
    result_array = []
    rules_path = str(rules_dir)
    rules_array = os.listdir(rules_path)
    rules_count = len(rules_array)
    print("Loading " + str(rules_count) + " YARA rules...")
    for x in range(0, int(rules_count)):
        rule_name = str(rules_dir) + str(rules_array[x])
        out = subprocess.Popen(['yara', str(rule_name).replace("\n", "").replace(" ",""), str(malware_path), "-w"],
        stdout = subprocess.PIPE,
        stderr = subprocess.PIPE)
        stdout, stderr = out.communicate()
        line = str(stdout).split(" ")[0]
        result_array.append(str(line))
        percent = int(x) * int(100)
        percent = int(percent) / int(rules_count)
        sys.stdout.write("\r%d%%" % percent)
        sys.stdout.flush()
        sys.stdout.write("\r\r\r")
    return(result_array)
      
def Yara_scan(malware_path, rules_path):
    out = subprocess.Popen(['yara', str(rules_path).replace("\n", "").replace(" ",""), str(malware_path), "-w"],
        stdout = subprocess.PIPE,
        stderr = subprocess.STDOUT)
    stdout, stderr = out.communicate()
    lines = str(stdout).count("\n") 
    result = str(stdout).split(" ")[0]

    if int(lines) > 1:
        result = str(stdout).replace(malware_path, "").replace("\n",",")[:-1]
        return(result)

    if "error" in str(result):
        result = "None"
    elif not result:
        result = "None"
    return(str(result).replace("\n",""))

def Check_connectivity():
    try:
        check_vt = urllib.urlopen("https://www.virustotal.com").getcode()
        if "200" in str(check_vt):
            print("VirusTotal seems up, the issue came from you")
            print("Verify your API key under the conf file")
            exit(1)
        else:
            check_internet = urllib.urlopen("https://google.com").getcode()
            if "200" in str(check_internet):
                print("The issue is coming from VirusTotal, be patient ...")
                exit(1)
            else:
                print("Unable to reack the internet, check your connection ...")
                exit(1)
    except:
        print("Connecivity error")
        exit(1)

def Vt_Threat_Classification(positive, total, date, md5):
    positive_percent = int(positive) * 100
    positive_percent = int(positive_percent) / int(total)
    compare_date = str(date).split(" ")[0]
    actual_date = datetime.today().strftime('%Y-%m-%d')
    d1 = datetime.strptime(actual_date, "%Y-%m-%d")
    d2 = datetime.strptime(compare_date, "%Y-%m-%d")
    days = abs((d2 - d1).days)
    if int(days) > int(600):
        date_threat = "Old"
    elif int(days) > int(100):
        date_threat = "Current"
    elif int(days) > int(30):
        date_threat = "New"
    elif int(days) < int(30):
        date_threat = "Emerging"
    else:
        date_threat = "A regular"

    print("First seen: " + str(date) + " (" + str(days) + " days ago)" )
    print( "Detection ratio: " + str(positive) +"/" + str(total) +" (" + str(positive_percent)+"%)" )
    if int(positive_percent) > int(70):
        threat = "dangerous threat"
    elif int(positive_percent) > 50:
        threat = "confirmed threat"
    elif int(positive_percent) > 35:
        threat = "thread"
    elif int(positive_percent) > 0:
        threat = "potential threat"
    else:
        threat = ""

    print("Classification: " + str(date_threat) + " " + str(threat))
    print("")

def Check_VirusTotal_Hash(vt_key, file_md5, av_list):
    try:
        params = {'apikey': vt_key, 'resource': file_md5}
        #params = {'shit'}
        headers = {
            "Accept-Encoding": "gzip, deflate",
            "User-Agent" : "gzip, MalwareLab Bot"
            }
        response = requests.get('https://www.virustotal.com/vtapi/v2/file/report', 
            params=params, headers=headers)
        json_response = response.json()
    #    print(json_response)
        first_seen = json_response['scan_date']
        Update_BDD("first_seen", str(first_seen),str(file_md5))
        positives = json_response['positives']
        total = json_response['total']
        ratio = str(positives) + "/" + str(total)
        Update_BDD("score", str(ratio), str(file_md5))
        Vt_Threat_Classification(positives, total, first_seen, file_md5)

        if "," in str(av_list):
            elems_number = av_list.count(",")
            for x in range(0, elems_number + 1):
                AV = str(av_list).split(",")[x].replace(" ","")
                value_av = json_response['scans'][AV]['result']
                if "ESET-NOD32" in str(AV):
                    Update_BDD("ESET NOD32", str(value_av), str(file_md5))
                else:
                    Update_BDD(str(AV).replace(" ",""), str(value_av), str(file_md5))
                print(str(AV) + ": " + str(value_av))
    except:
        print("Fetching error: Unable to get a result from VirusTotal")
        Check_connectivity()
        exit(1)

def Load_Conf_Value(value):
    try:
        tested_value = Get_Option_From_Conf_File(value)
        if "None" in str(tested_value):
            exit(1)
    except:
        print("[-] Configuration error, could not find the value: " + str(value))
        exit(1)

def Get_Option_From_Conf_File(option):
    file_path = 'MalwareLab.conf'
    with open(file_path) as fp:
        for cnt, line in enumerate(fp):
            if str(option) in line:
                value = str(line).split("= ")
                data = value[1].replace("\n","")
                return(value[1].replace("\n",""))

def File_Exist(file_path):
    try:
        file = open(file_path, 'r')
    except:
        print("Error: " + str(file_path) + " not found")
        exit(1)


